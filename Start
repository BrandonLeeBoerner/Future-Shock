#!/bin/env python2.7

# Imports the libtcod library
import libtcodpy as libtcod
import math
import textwrap
import shelve

# Reusable variable for screen size
SCREEN_WIDTH = 113
SCREEN_HEIGHT = 62

# Width of bar
BAR_WIDTH = 20

# Height of panel
PANEL_HEIGHT = 7

# Width of log panel
PANEL_Y = SCREEN_HEIGHT - PANEL_HEIGHT

# Framerate
LIMIT_FPS = 20

# Width of inventory screen
INVENTORY_WIDTH = 50

# Width of map
MAP_WIDTH = 90

# Height of map
MAP_HEIGHT = 55

#Width of status bar
STATUS_WIDTH = 23
STATUS_X = SCREEN_WIDTH - STATUS_WIDTH

# Max size of a room
ROOM_MAX_SIZE = 10

# Minumum size of a room
ROOM_MIN_SIZE = 3

# Level up screen Width
LEVEL_SCREEN_WIDTH = 40

# Max ammount of rooms per map
MAX_ROOMS = 50

# FOV algorithm
FOV_ALGO = 0

# Light walls with fov
FOV_LIGHT_WALLS = True

# ?
MSG_X = BAR_WIDTH + 2

# Width of message bar
MSG_WIDTH = SCREEN_WIDTH - BAR_WIDTH - 2

#Height of message bar
MSG_HEIGHT = PANEL_HEIGHT - 1

# Width of character screen
CHARACTER_SCREEN_WIDTH = 30

# Spell Variables
# Heal
    # Ammount
HEAL_AMMOUNT = 40
# Lightning
    # Damage
LIGHTNING_DAMAGE = 40
    # Range
LIGHTNING_RANGE = 5
# Confused
    # Turns
CONFUSE_NUM_TURNS = 10
    # Range
CONFUSE_RANGE = 8
# Fireball
    # Radius
FIREBALL_RADIUS = 3
    # Damage
FIREBALL_DAMAGE = 25

# Experience
LEVEL_UP_BASE = 200
LEVEL_UP_FACTOR = 150

# Color of walls outside FOV
color_dark_wall = libtcod.Color(0, 0, 100)
# Color of walls inside FOV
color_light_wall = libtcod.Color(130, 110, 50)
# Color of ground outside FOV
color_dark_ground = libtcod.Color(50, 50, 150)
# Color of ground inside FOV
color_light_ground = libtcod.Color(200, 180, 50)

# General Tile class
class Tile:
    def __init__(self, blocked, block_sight = None):
        self.blocked = blocked

        self.explored = False

        if block_sight is None: block_sight = blocked
        self.block_sight = block_sight

# Class for rooms
class Rect:
    def __init__(self, x, y, w, h):
        self.x1 = x
        self.y1 = y
        self.x2 = x + w
        self.y2 = y + h
    # Center tile of room
    def center(self):
        center_x = (self.x1 + self.x2) / 2
        center_y = (self.y1 + self.y2) / 2
        return (center_x, center_y)
    # room intersect
    def intersect(self, other):
        return (self.x1 <= other.x2 and self.x2 >= other.x1 and
                self.y1 <= other.y2 and self.y2 >= other.y1)

# General object class
class Object:
    def __init__(self, x, y, char, name, color, blocks=False, always_visable=False, fighter=None, ai=None, item=None, equipment=None):
        self.x = x
        self.y = y
        self.char = char
        self.name = name
        self.color = color
        self.blocks = blocks
        self.always_visable = always_visable
        self.fighter = fighter
        if self.fighter:
            self.fighter.owner = self

        self.ai = ai
        if self.ai:
            self.ai.owner = self

        self.item = item
        if self.item:
            self.item.owner = self

        self.equipment = equipment
        if self.equipment:
            self.equipment.owner = self

            self.item = Item()
            self.item.owner = self

    # Check if tile is blocked
    def move(self, dx, dy):
        if not is_blocked(self.x + dx, self.y + dy):
            self.x += dx
            self.y += dy

    # Monster move function
    def move_towards(self, target_x, target_y):
        dx = target_x - self.x
        dy = target_y - self.y
        distance = math.sqrt(dx ** 2 + dy ** 2)

        dx = int(round(dx / distance))
        dy = int(round(dy / distance))
        self.move(dx, dy)

    # Moves monster towards player
    def move_astar(self, target):
        fov = libtcod.map_new(MAP_WIDTH, MAP_HEIGHT)

        for y1 in range(MAP_HEIGHT):
            for x1 in range(MAP_WIDTH):
                libtcod.map_set_properties(fov, x1, y1, not map[x1][y1].block_sight, not map[x1][y1].blocked)

        for obj in objects:
            if obj.blocks and obj != self and obj != target:
                libtcod.map_set_properties(fov, obj.x, obj.y, True, False)

        my_path = libtcod.path_new_using_map(fov, 1.41)

        libtcod.path_compute(my_path, self.x, self.y, target.x, target.y)

        if not libtcod.path_is_empty(my_path) and libtcod.path_size(my_path) < 25:
            x, y = libtcod.path_walk(my_path, True)
            if x or y:
                self.x = x
                self.y = y
        else:
            self.move_towards(target.x, target.y)

        libtcod.path_delete(my_path)

    # Finds distance between object and coordinates
    def distance(self, x, y):
        return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2)

    # distance towards player
    def distance_to(self, other):
        dx = other.x - self.x
        dy = other.y - self.y
        return math.sqrt(dx ** 2 + dy ** 2)

    # Draws bodys on back tile if something is on top of it
    def send_to_back(self):
        global objects
        objects.remove(self)
        objects.insert(0, self)

    # Draws objects
    def draw(self):
        if (libtcod.map_is_in_fov(fov_map, self.x, self.y) or
            (self.always_visable and map[self.x][self.y].explored)):

            libtcod.console_set_default_foreground(con, self.color)
            libtcod.console_put_char(con, self.x, self.y, self.char, libtcod.BKGND_NONE)
    # Clears
    def clear(self):
        libtcod.console_put_char(con, self.x, self.y, ' ', libtcod.BKGND_NONE)

# Definiton for blocked objects
def is_blocked(x, y):
    if map[x][y].blocked:
        return True

    for object in objects:
        if object.blocks and object.x == x and object.y == y:
            return True

    return False

# Basic item class
class Item:
    def __init__(self, use_function=None):
        self.use_function = use_function

    # Function to pick up items
    def pick_up(self):
        if len(inventory) >= 26:
            message('Your inventory is full, cannot pick up ' + self.owner.name + '.', libtcod.red)
        else:
            inventory.append(self.owner)
            objects.remove(self.owner)
            message('You picked up a ' + self.owner.name + '!', libtcod.green)

            equipment = self.owner.equipment
            if equipment and get_equiped_in_slot(equipment.slot) is None:
                equipment.equip()

    # Function to drop items
    def drop(self):
        if self.owner.equipment:
            self.owner.equipment.dequip()

        objects.append(self.owner)
        inventory.remove(self.owner)
        self.owner.x = player.x
        self.owner.y = player.y
        message('You dropped a ' + self.owner.name + '.', libtcod.yellow)

    # Function to use items
    def use(self):
        if self.owner.equipment:
            self.owner.equipment.toggle_equip()
            return

        if self.use_function is None:
            message('The ' + self.owner.name + " cannot be used.")
        else:
            if self.use_function() != 'cancelled':
                inventory.remove(self.owner)

# Basic equipment class
class Equipment:

    def __init__(self, slot, vitality_bonus=0, strength_bonus=0, dexterity_bonus=0, intelligence_bonus=0, wisdom_bonus=0, luck_bonus=0, max_hp_bonus=0, hp_regen_bonus=0, light_range_bonus=0):
        self.vitality_bonus = vitality_bonus
        self.strength_bonus = strength_bonus
        self.dexterity_bonus = dexterity_bonus
        self.intelligence_bonus = intelligence_bonus
        self.wisdom_bonus = wisdom_bonus
        self.luck_bonus = luck_bonus
        self.max_hp_bonus = max_hp_bonus
        self.hp_regen_bonus = hp_regen_bonus
        self.light_range_bonus = light_range_bonus

        self.slot = slot
        self.is_equipped = False

    # Function to toggle equipment
    def toggle_equip(self):
        if self.is_equipped:
            self.dequip()
        else:
            self.equip()

    # Function to equip items
    def equip(self):
        old_equpiment = get_equiped_in_slot(self.slot)
        if old_equpiment is not None:
            old_equpiment.dequip()

        self.is_equipped = True
        message('Equipped ' + self.owner.name + ' on ' + self.slot + '.', libtcod.light_green)

    # Function to dequip items
    def dequip(self):
        if not self.is_equipped: return
        self.is_equipped = False
        message('Dequipped ' + self.owner.name + ' from ' + self.slot + '.', libtcod.light_yellow)

# Checks for what equipment are used
def get_equiped_in_slot(slot):
    for obj in inventory:
        if obj.equipment and obj.equipment.slot == slot and obj.equipment.is_equipped:
            return obj.equipment
        return None

# Gets all equipped items
def get_all_equipped(obj):
    if obj == player:
        equipped_list = []
        for item in inventory:
            if item.equipment and item.equipment.is_equipped:
                equipped_list.append(item.equipment)
        return equipped_list
    else:
        return []

# Basic function for menus
def menu(header, options, width):
    if len(options) > 26: raise ValueError('Cannot have a menu with more than 26 options.')

    header_height = libtcod.console_get_height_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    if header == '':
        header_height = 0
    height = len(options) + header_height

    window = libtcod.console_new(width, height)

    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_print_rect_ex(window, 0, 0, width, height, libtcod.BKGND_NONE, libtcod.LEFT, header)

    y = header_height
    letter_index = ord('a')
    for option_text in options:
        text = '(' + chr(letter_index) + ')' + option_text
        libtcod.console_print_ex(window, 0, y, libtcod.BKGND_NONE, libtcod.LEFT, text)
        y += 1
        letter_index += 1

    x = SCREEN_WIDTH/2 - width/2
    y = SCREEN_HEIGHT/2 - height/2
    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 0.7)

    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)

    if key.vk == libtcod.KEY_F11:
        libtcod.console_set_fullscreen(not libtcod.console_is_fullscreen())

    index = key.c - ord('a')
    if index >= 0 and index < len(options): return index
    return None

# Function to display inventory
def inventory_menu(header):
    if len(inventory) == 0:
        options = ['Inventory is empty.']
    else:
        s1 = []
        for item in inventory:
            text = item.name
            count = s1.count(text)

            if item.equipment and item.equipment.is_equipped:
                text = text + ' (on ' + item.equipment.slot + ')'

            s1.append(text)

    index = menu(header, s1, INVENTORY_WIDTH)

    if index is None or len(inventory) == 0: return None
    return inventory[index].item

# Function to display messages
def msgbox( text, width=50):
    menu(text, [], width)

# Class for objects that can fight
class Fighter:
    def __init__(self, vitality, hp, dexterity, strength, intelligence, wisdom, luck, light_range, xp, regen, death_function=None):
        self.base_vitality = vitality
        self.base_max_hp = hp
        self.hp = hp
        self.base_dexterity = dexterity
        self.base_strength = strength
        self.base_intelligence = intelligence
        self.base_wisdom = wisdom
        self.base_luck = luck
        self.base_light_range = light_range
        self.xp = xp
        self.base_hp_regen = regen
        self.death_function = death_function

    # Adds stat bonuses to the main stat
    @property
    def vitality(self):
        bonus = sum(equipment.vitality_bonus for equipment in get_all_equipped(self.owner))
        return self.base_vitality + bonus

    @property
    def strength(self):
        bonus = sum(equipment.strength_bonus for equipment in get_all_equipped(self.owner))
        return self.base_strength + bonus

    @property
    def dexterity(self):
        bonus = sum(equipment.dexterity_bonus for equipment in get_all_equipped(self.owner))
        return self.base_dexterity + bonus

    @property
    def intelligence(self):
        bonus = sum(equipment.intelligence_bonus for equipment in get_all_equipped(self.owner))
        return self.base_intelligence + bonus

    @property
    def wisdom(self):
        bonus = sum(equipment.wisdom_bonus for equipment in get_all_equipped(self.owner))
        return self.base_wisdom + bonus

    @property
    def luck(self):
        bonus = sum(equipment.luck_bonus for equipment in get_all_equipped(self.owner))
        return self.base_luck + bonus

    @property
    def max_hp(self):
        bonus = sum(equipment.max_hp_bonus for equipment in get_all_equipped(self.owner))
        return self.base_max_hp + bonus

    @property
    def hp_regen(self):
        bonus = sum(equipment.hp_regen_bonus for equipment in get_all_equipped(self.owner))
        return self.base_hp_regen + bonus

    @property
    def light_range(self):
        bonus = sum(equipment.light_range_bonus for equipment in get_all_equipped(self.owner))
        return self.base_light_range + bonus

    # Determines if an attack is a hit, miss, or crit
    def hit_chance(self, target):
        crit = 100 - self.luck
        miss = (target.fighter.dexterity + target.fighter.luck) * 2 - self.dexterity
        hit = libtcod.random_get_int(0, 0, 100)

        if miss > 100:
            miss = crit - 1

        message(self.owner.name.capitalize() + ' rolled a ' + str(hit), libtcod.yellow)
        if hit >= crit:
            self.critical(target)
        elif hit <= miss:
            message(self.owner.name.capitalize() + ' attacks ' + target.name + ' and misses.', libtcod.red)
        else:
            self .attack(target)

    # Function for a critical hit
    def critical(self, target):
        damage = self.strength * 2
        message('Critical Hit!', libtcod.yellow)
        message(self.owner.name.capitalize() + ' attacks ' + target.name + ' for ' + str(damage) + ' hit points.', libtcod.white)
        target.fighter.take_damage(damage)

    # Attack an object
    def attack(self, target):
        rng = libtcod.random_get_int(0, self.base_strength, self.strength)
        damage = rng - target.fighter.dexterity

        if damage > 0:
            message(self.owner.name.capitalize() + ' attacks ' + target.name + ' for ' + str(damage) + ' hit points.', libtcod.white)
            target.fighter.take_damage(damage)
        else:
            message(self.owner.name.capitalize() + ' attacks ' + target.name + ' but it has no effect!', libtcod.white)

    # Take dama from object
    def take_damage(self, damage):
        if damage > 0:
            self.hp -= damage

            if self.hp <= 0:
                function = self.death_function
                if function is not None:
                    function(self.owner)

                if self.owner != player:
                    player.fighter.xp += self.xp

    # Function for regaining hit points
    def heal(self, ammount):
        self.hp += ammount
        if self.hp > self.max_hp:
            self.hp = self.max_hp

# Monster AI
class BasicMonster:
    def take_turn(self):
        monster = self.owner
        if libtcod.map_is_in_fov(fov_map, monster.x, monster.y):

            if monster.distance_to(player) >= 2:
                monster.move_astar(player)

            elif player.fighter.hp > 0:
                monster.fighter.hit_chance(player)

# Monster AI for confusion
class ConfusedMonster:
    def __init__(self, old_ai, num_turns=CONFUSE_NUM_TURNS):
        self.old_ai = old_ai
        self.num_turns = num_turns

    # Makes monster wander around aimlessly until the duration ends
    def take_turn(self):
        if self.num_turns > 0:
            self.owner.move(libtcod.random_get_int(0, -1, 1), libtcod.random_get_int(0, -1, 1))
            self.num_turns -= 1

        else:
            self.owner.ai = self.old_ai
            message('The ' + self.owner.name + ' is no longer confused!', libtcod.red)

# Spawns rooms
def create_room(room):
    global map
    for x in range(room.x1 + 1, room.x2):
        for y in range(room.y1 + 1, room.y2):
            map[x][y].blocked = False
            map[x][y].block_sight = False

# Spawns tunnels between rooms
def create_h_tunnel(x1, x2, y):
    global map
    for x in range(min(x1, x2), max(x1, x2) +1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

# Spawn tunnels between rooms
def create_v_tunnel(y1, y2, x):
    global map
    # vertical tunnel
    for y in range(min(y1, y2), max(y1, y2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

def random_choice_index(chances):
    dice = libtcod.random_get_int(0, 1, sum(chances))

    running_sum = 0
    choice = 0
    for w in chances:
        running_sum += w

        if dice <= running_sum:
            return choice
        choice += 1

def random_choice(chances_dict):
    chances = chances_dict.values()
    strings = chances_dict.keys()

    return strings[random_choice_index(chances)]

def from_dungeon_level(table):
    for (value, level) in reversed(table):
        if dungeon_level >= level:
            return value
    return 0

# Makes map
def make_map():
    global map, objects, stairs

    # Object list
    objects = [player]

    map = [[ Tile(True)
        for y in range(MAP_HEIGHT) ]
            for x in range(MAP_WIDTH) ]

    rooms = []
    num_rooms = 0

    for r in range(MAX_ROOMS):
        w = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        h = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)

        x = libtcod.random_get_int(0, 0, MAP_WIDTH - w - 1)
        y = libtcod.random_get_int(0, 0, MAP_HEIGHT - h - 1)

        new_room = Rect(x, y, w, h)

        failed = False
        for other_room in rooms:
            if new_room.intersect(other_room):
                failed = True
                break

        if not failed:
            create_room(new_room)
            (new_x, new_y) = new_room.center()

            if num_rooms == 0:
                player.x = new_x
                player.y = new_y
            else:
                (prev_x, prev_y) = rooms[num_rooms-1].center()
                if libtcod.random_get_int(0, 0, 1) == 1:
                    create_h_tunnel(prev_x, new_x, prev_y)
                    create_v_tunnel(prev_y, new_y, new_x)
                else:
                    create_v_tunnel(prev_y, new_y, prev_x)
                    create_h_tunnel(prev_x, new_x, new_y)

            place_objects(new_room)
            rooms.append(new_room)
            num_rooms += 1

    stairs = Object(new_x, new_y, '>', 'stairs', libtcod.white, always_visable=True)
    objects.append(stairs)
    stairs.send_to_back()

# Gets name of object under the mouse
def get_names_under_mouse():
    global mouse

    (x, y) = (mouse.cx, mouse.cy)

    names = [obj.name for obj in objects
        if obj.x == x and obj.y == y and libtcod.map_is_in_fov(fov_map, obj.x, obj.y)]

    names = ', '.join(names)
    return names.capitalize()

# Renders map
def render_all():
    fov_recompute = False
    libtcod.map_compute_fov(fov_map, player.x, player.y, TORCH_RADIUS, FOV_LIGHT_WALLS, FOV_ALGO)
    # Set tile color
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            visable = libtcod.map_is_in_fov(fov_map, x, y)
            wall = map[x][y].block_sight
            if not visable:
                if map[x][y].explored:
                    if wall:
                        libtcod.console_set_char_background(con, x, y, color_dark_wall, libtcod.BKGND_SET )
                    else:
                        libtcod.console_set_char_background(con, x, y, color_dark_ground, libtcod.BKGND_SET )
            else:
                if wall:
                    libtcod.console_set_char_background(con, x, y, color_light_wall, libtcod.BKGND_SET )
                else:
                    libtcod.console_set_char_background(con, x, y, color_light_ground, libtcod.BKGND_SET )
                map[x][y].explored = True


    # Draw all objects

    for object in objects:
        if object != player:
            object.draw()
    player.draw()

    # Blit
    libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)

    libtcod.console_set_default_background(panel, libtcod.black)
    libtcod.console_clear(panel)
    libtcod.console_set_default_background(status, libtcod.black)
    libtcod.console_clear(status)

    y = 1
    for (line, color) in game_msgs:
        libtcod.console_set_default_foreground(panel, color)
        libtcod.console_print_ex(panel, 0, y, libtcod.BKGND_NONE, libtcod.LEFT, line)
        y += 1

    #render_bar(1, 1, BAR_WIDTH, 'HP', player.fighter.hp, player.fighter.max_hp,
    #    libtcod.light_red, libtcod.darker_red)
    #libtcod.console_print_ex(panel, 1, 3, libtcod.BKGND_NONE, libtcod.LEFT, 'Dungeon level ' + str(dungeon_level))

    #libtcod.console_set_default_foreground(panel, libtcod.light_grey)
    #libtcod.console_print_ex(panel, 1, 0, libtcod.BKGND_NONE, libtcod.LEFT, get_names_under_mouse())

    libtcod.console_blit(panel, 0, 0, SCREEN_WIDTH - 20, PANEL_HEIGHT, 0, 0, PANEL_Y)
    libtcod.console_set_default_foreground(status, libtcod.green)
    libtcod.console_print_ex(status, 1, 3, libtcod.BKGND_NONE, libtcod.LEFT, 'LEVEL:')

    libtcod.console_set_default_foreground(status, libtcod.dark_green)
    libtcod.console_print_ex(status, 8, 3, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 10, 3, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 12, 3, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 12, 3, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 6, 13, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 8, 13, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 6, 15, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 8, 15, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 6, 17, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 8, 17, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 16, 13, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 18, 13, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 16, 15, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 18, 15, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 16, 17, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 18, 17, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 8, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 10, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 12, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 14, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 16, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 18, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 20, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 16, 22, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 18, 22, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 20, 22, libtcod.BKGND_NONE, libtcod.LEFT, '#')

    libtcod.console_set_default_foreground(status, libtcod.darker_green)
    libtcod.console_print_ex(status, 9, 3, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 11, 3, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 7, 13, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 9, 13, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 7, 15, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 9, 15, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 7, 17, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 9, 17, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 17, 13, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 19, 13, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 17, 15, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 19, 15, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 17, 17, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 19, 17, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 9, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 11, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 13, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 15, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 17, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 19, 20, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 17, 22, libtcod.BKGND_NONE, libtcod.LEFT, '#')
    libtcod.console_print_ex(status, 19, 22, libtcod.BKGND_NONE, libtcod.LEFT, '#')

    libtcod.console_set_default_foreground(status, libtcod.green)
    libtcod.console_print_ex(status, 12, 3, libtcod.BKGND_NONE, libtcod.RIGHT, str(player.level))
    libtcod.console_print_ex(status, 1, 13, libtcod.BKGND_NONE, libtcod.LEFT, 'Vit:')
    libtcod.console_print_ex(status, 9, 13, libtcod.BKGND_NONE, libtcod.RIGHT, str(player.fighter.vitality))
    libtcod.console_print_ex(status, 11, 13, libtcod.BKGND_NONE, libtcod.LEFT, 'Int:')
    libtcod.console_print_ex(status, 19, 13, libtcod.BKGND_NONE, libtcod.RIGHT, str(player.fighter.intelligence))
    libtcod.console_print_ex(status, 1, 15, libtcod.BKGND_NONE, libtcod.LEFT, 'Str:')
    libtcod.console_print_ex(status, 9, 15, libtcod.BKGND_NONE, libtcod.RIGHT, str(player.fighter.strength))
    libtcod.console_print_ex(status, 11, 15, libtcod.BKGND_NONE, libtcod.LEFT, 'Wis:')
    libtcod.console_print_ex(status, 19, 15, libtcod.BKGND_NONE, libtcod.RIGHT, str(player.fighter.wisdom))
    libtcod.console_print_ex(status, 1, 17, libtcod.BKGND_NONE, libtcod.LEFT, 'Dex:')
    libtcod.console_print_ex(status, 9, 17, libtcod.BKGND_NONE, libtcod.RIGHT, str(player.fighter.dexterity))
    libtcod.console_print_ex(status, 11, 17, libtcod.BKGND_NONE, libtcod.LEFT, 'Lck:')
    libtcod.console_print_ex(status, 19, 17, libtcod.BKGND_NONE, libtcod.RIGHT, str(player.fighter.luck))
    libtcod.console_print_ex(status, 1, 20, libtcod.BKGND_NONE, libtcod.LEFT, 'Creds:')
    libtcod.console_print_ex(status, 1, 22, libtcod.BKGND_NONE, libtcod.LEFT, 'Dungeon level:')
    libtcod.console_print_ex(status, 20, 22, libtcod.BKGND_NONE, libtcod.RIGHT, str(dungeon_level))




    render_bar(1, 5, BAR_WIDTH, 'HP', player.fighter.hp, player.fighter.max_hp, libtcod.Color(255, 0, 0), libtcod.Color(140, 0, 0))
    level_up_xp = LEVEL_UP_BASE + player.level * LEVEL_UP_FACTOR
    render_bar(1, 9, BAR_WIDTH, 'EXP', player.fighter.xp, level_up_xp, libtcod.green, libtcod.black)

    libtcod.console_blit(status, 0, 0, STATUS_WIDTH, SCREEN_HEIGHT, 0, STATUS_X, 0)

# Places objects on the map
def place_objects(room):

    max_monsters = from_dungeon_level([[2, 1], [3, 4], [5, 6]])

    monster_chances = {}
    monster_chances['Hound'] = 80
    monster_chances['Mutant'] = from_dungeon_level([[15, 3], [30, 5], [60, 7]])

    max_items = from_dungeon_level([[1, 1], [2, 4]])

    item_chances = {}
    item_chances['heal'] = 35
    item_chances['lightning'] = from_dungeon_level([[25, 4]])
    item_chances['fireball'] = from_dungeon_level([[25, 6]])
    item_chances['confuse'] = from_dungeon_level([[10, 2]])
    item_chances['sword'] = from_dungeon_level([[5 , 4]])
    item_chances['shield'] = from_dungeon_level([[15, 8]])

    num_monsters = libtcod.random_get_int(0, 0, max_monsters)

    for i in range(num_monsters):
        x = libtcod.random_get_int(0, room.x1+1, room.x2-1)
        y = libtcod.random_get_int(0, room.y1+1, room.y2-1)

        if not is_blocked(x, y):
            choice = random_choice(monster_chances)
            if choice == 'Hound':
                fighter_component = Fighter(vitality=0, hp=20, dexterity=0, strength=4, intelligence=0, wisdom=0, luck=3, light_range=0, xp=50, regen=0, death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'h', 'Hound', libtcod.darker_grey, blocks=True, fighter=fighter_component, ai=ai_component)

            elif choice == 'Mutant':
                fighter_component = Fighter(vitality=0, hp=40, dexterity=2, strength=8, intelligence=0, wisdom=0, luck=2, light_range=0, xp=100, regen=0, death_function=monster_death)
                ai_component = BasicMonster()

                monster = Object(x, y, 'M', 'Mutant', libtcod.darker_green, blocks=True, fighter=fighter_component, ai=ai_component)
            objects.append(monster)

    num_items = libtcod.random_get_int(0, 0, max_items)

    for i in range(num_items):
        x = libtcod.random_get_int(0, room.x1+1, room.x2-1)
        y = libtcod.random_get_int(0, room.y1+1, room.y2-1)

        if not is_blocked(x, y):
            choice = random_choice(item_chances)
            if choice == 'heal':
                item_component = Item(use_function=cast_heal)
                item = Object(x, y, '!', 'healing potion', libtcod.violet, item=item_component)

            elif choice == 'lightning':
                item_component = Item(use_function=cast_lightning)
                item = Object(x, y, '#', 'scroll of lightning bolt', libtcod.light_yellow, item=item_component)

            elif choice == 'fireball':
                item_component = Item(use_function=cast_fireball)
                item = Object(x, y, '#', 'scroll of fireball', libtcod.light_yellow, item=item_component)

            elif choice == 'confuse':
                item_component = Item(use_function=cast_confuse)
                item = Object(x, y, '#', 'Scroll of confusion', libtcod.light_yellow, item = item_component)

            elif choice == 'sword':
                equipment_component = Equipment(slot='right hand', strength_bonus=3)
                item = Object(x, y, '/', 'sword', libtcod.sky, equipment=equipment_component)

            elif choice == 'shield':
                equipment_component = Equipment(slot='left hand', dexterity_bonus=1)
                item = Object(x, y, '[', 'shield', libtcod.darker_orange, equipment=equipment_component)

            objects.append(item)
            item.send_to_back()

# Makes a status bar at the bottom of the screen to display a text log
def render_bar(x, y, total_width, name, value, maximum, bar_color, back_color):
    bar_width = int(float(value) / maximum * total_width)

    libtcod.console_set_default_background(status, back_color)
    libtcod.console_rect(status, x, y, total_width, 1, False, libtcod.BKGND_SCREEN)

    libtcod.console_set_default_background(status, bar_color)
    if bar_width > 0:
        libtcod.console_rect(status, x, y, bar_width, 1, False, libtcod.BKGND_SCREEN)

    libtcod.console_set_default_foreground(status, libtcod.white)
    libtcod.console_print_ex(status, x + total_width / 2, y, libtcod.BKGND_NONE, libtcod.CENTER,
        name + ': ' + str(value) + '/' + str(maximum))

# Displays messages in render_bar
def message(new_msg, color = libtcod.white):
    new_msg_lines = textwrap.wrap(new_msg, MSG_WIDTH)

    for line in new_msg_lines:
        if len(game_msgs) == MSG_HEIGHT:
            del game_msgs[0]

        game_msgs.append( (line, color) )

# Definiton for moving and attacking
def player_move_or_attack(dx, dy):
    global fov_recompute

    x = player.x + dx
    y = player.y + dy

    target = None
    for object in objects:
        if object.fighter and object.x == x and object.y == y:
            target = object
            break

    if target is not None:
        player.fighter.hit_chance(target)
    else:
        player.move(dx, dy)
        fov_recompute = True

# Regen a small ammount of hit points every turn
#!#!# NEEDS WORK!
regen_value = 0
def hp_regen(inc):
    global regen_value
    regen_value += inc
    while regen_value >= 1:
        player.fighter.heal(1)
        regen_value -= 1

# Keybindings
def handle_keys():
    global key
    # Fullscreen
    if key.vk == libtcod.KEY_F11:
        #Alt+Enter: toggle fullscreen
        libtcod.console_set_fullscreen(not libtcod.console_is_fullscreen())

    elif key.vk == libtcod.KEY_ESCAPE:
        return 'exit'  #exit game

    if game_state == 'playing':
        #movement keys
        if key.c == ord('k'):
            x = player.x + 0
            y = player.y + -1
            if map[x][y].blocked:
                return 'didnt-take-turn'
            else:
                player_move_or_attack(0, -1)
                hp_regen(player.fighter.hp_regen)
        elif key.c == ord('j'):
            x = player.x + 0
            y = player.y + 1
            if map[x][y].blocked:
                return 'didnt-take-turn'
            else:
                player_move_or_attack(0, 1)
                hp_regen(player.fighter.hp_regen)
        elif key.c == ord('l'):
            x = player.x + 1
            y = player.y + 0
            if map[x][y].blocked:
                return 'didnt-take-turn'
            else:
                player_move_or_attack(1, 0)
                hp_regen(player.fighter.hp_regen)
        elif key.c == ord('h'):
            x = player.x + -1
            y = player.y + 0
            if map[x][y].blocked:
                return 'didnt-take-turn'
            else:
                player_move_or_attack(-1, 0)
                hp_regen(player.fighter.hp_regen)
        elif key.c == ord('y'):
            x = player.x + -1
            y = player.y + -1
            if map[x][y].blocked:
                return 'didnt-take-turn'
            else:
                player_move_or_attack(-1, -1)
                hp_regen(player.fighter.hp_regen)
        elif key.c == ord('u'):
            x = player.x + 1
            y = player.y + -1
            if map[x][y].blocked:
                return 'didnt-take-turn'
            else:
                player_move_or_attack(1, -1)
                hp_regen(player.fighter.hp_regen)
        elif key.c == ord('b'):
            x = player.x + -1
            y = player.y + 1
            if map[x][y].blocked:
                return 'didnt-take-turn'
            else:
                player_move_or_attack(-1, 1)
                hp_regen(player.fighter.hp_regen)
        elif key.c == ord('n'):
            x = player.x + 1
            y = player.y + 1
            if map[x][y].blocked:
                return 'didnt-take-turn'
            else:
                player_move_or_attack(1, 1)
                hp_regen(player.fighter.hp_regen)
        else:
            key_char = chr(key.c)

            if key_char == 'g':
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break

            if key_char == 'i':
                chosen_item =inventory_menu('Press the key next to an item to use it, or any other to cancel.\n')
                if chosen_item is not None:
                    chosen_item.use()

            if key_char == 'd':
                chosen_item = inventory_menu('Press the key next to an item to drop it, or any other to cancel.\n')
                if chosen_item is not None:
                    chosen_item.drop()

            elif key.vk == libtcod.KEY_TEXT:
                ch = key.text
                if ch == ">":
                    if stairs.x == player.x and stairs.y == player.y:
                        next_level()

            return 'didnt-take-turn'

# Function to handle player level ups
def check_level_up():
    level_up_xp = LEVEL_UP_BASE + player.level * LEVEL_UP_FACTOR
    if player.fighter.xp >= level_up_xp:
        player.level += 1
        player.fighter.xp -= level_up_xp
        message(' Your battle skills grow stronger! You reached level ' + str(player.level) + '!', libtcod.yellow)

        choice = None
        while choice == None:
            choice = menu('Level up! Choose a stat to raise:\n',
                ['vitality (+10 HP, from ' + str(player.fighter.max_hp) + ')',
                'Strength (+1 attack, from ' +str(player.fighter.strength) + ')',
                'Dexterity (+1 dexterity, from ' + str(player.fighter.dexterity) + ')',
                'Intelligence (+1 ?, from ' + str(player.fighter.base_intelligence) + ')',
                'Wisdom (+1 ?, from ' + str(player.fighter.base_wisdom) + ')',
                'Luck (+1 ?, from ' + str(player.fighter.base_luck) + ')'], LEVEL_SCREEN_WIDTH)

        if choice == 0:
            player.fighter.base_vitality += 1
        elif choice == 1:
            player.fighter.base_strength += 1
        elif choice == 2:
            player.fighter.base_dexterity += 1
        elif choice == 3:
            player.fighter.base_intelligence += 1
        elif choice == 4:
            player.fighter.base_wisdom += 1
        elif choice == 5:
            player.fighter.base_luck += 1

# Changes max hp and regen value based on vitality
def check_vitality():
    player.fighter.max_hp = player.fighter.base_max_hp + (player.fighter.vitality * 10)
    player.fighter.hp_regen = player.fighter.base_hp_regen + (player.fighter.vitality * 0.02)
    if player.fighter.hp > player.fighter.max_hp:
        player.fighter.hp = player.fighter.max_hp


# Handles player death
def player_death(player):
    global game_state
    message('You died!', libtcod.dark_red)
    game_state = 'dead'
    player.char = chr(178)
    player.color = libtcod.dark_red

# Handles monster death
def monster_death(monster):
    message(monster.name.capitalize() + ' is dead!', libtcod.red)
    message('The ' + monster.name + ' is dead! You gain ' + str(monster.fighter.xp) + ' experience points.', libtcod.orange)
    monster.char = chr(177)
    monster.color = libtcod.dark_red
    monster.blocks = False
    monster.fighter = None
    monster.ai = None
    monster.name = 'remains of ' + monster.name
    monster.send_to_back()

# Function to get tile under mouse
def target_tile(max_range=None):
    #return the position of a tile left-clicked in player's FOV (optionally in a range), or (None,None) if right-clicked.
    global key, mouse
    while True:
        libtcod.console_flush()
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)
        render_all()
        (x, y) = (mouse.cx, mouse.cy)

        if mouse.rbutton_pressed or key.vk == libtcod.KEY_ESCAPE:
            return (None, None)

        if (mouse.lbutton_pressed and libtcod.map_is_in_fov(fov_map, x, y) and
            (max_range is None or player.distance(x, y) <= max_range)):
            return (x, y)

# Used with target tile to target a monster with ranged attacks
def target_monster(max_range=None):
    while True:
        (x, y) = target_tile(max_range)
        if x is None:
            return None

        for obj in objects:
            if obj.x == x and obj.y == y and obj.fighter and obj != player:
                return obj

# Find the closest monster to you
def closest_monster(max_range):
    closest_enemy = None
    closest_dist = max_range + 1

    for object in objects:
        if object.fighter and not object == player and libtcod.map_is_in_fov(fov_map, object.x, object.y):
            dist = player.distance_to(object)
            if dist < closest_dist:
                closest_enemy = object
                closest_dist = dist
    return closest_enemy


def cast_heal():
    if player.fighter.hp == player.fighter.max_hp:
        message('You are already at full health.', libtcod.red)
        return 'cancelled'
    message(' Your wounds start to feel better!', libtcod.light_violet)
    player.fighter.heal(HEAL_AMMOUNT)

def cast_lightning():
    monster = closest_monster(LIGHTNING_RANGE)
    if monster is None:
        message('No enemy is close enough to strike.', libtcod.red)
        return 'cancelled'

    message('A lighting bolt strikes the ' + str.lower(monster.name) + ' with a loud thunder! The damage is ' + str(LIGHTNING_DAMAGE) + ' hit points.', libtcod.light_blue)
    monster.fighter.take_damage(LIGHTNING_DAMAGE)

def cast_confuse():
    message('Left-click an enemy to confuse it, or right-click to cancel.', libtcod.light_cyan)
    monster = target_monster(CONFUSE_RANGE)
    if monster is None: return 'cancelled'

    old_ai = monster.ai
    monster.ai  = ConfusedMonster(old_ai)
    monster.ai.owner = monster
    message('The eyes of the ' + monster.name + ' look vacant, as he starts to stumble around!', libtcod.light_green)

def cast_fireball():
    message('Left-click a target tile for the fireball, or right-click to cancel.', libtcod.light_cyan)
    (x, y) = target_tile()
    if x is None: return 'cancelled'
    message('The fireball explodes, burning everything within ' + str(FIREBALL_RADIUS) + ' tiles!', libtcod.orange)

    for obj in objects:  #damage every fighter in range, including the player
        if obj.distance(x, y) <= FIREBALL_RADIUS and obj.fighter:
            message('The ' + obj.name + ' gets burned for ' + str(FIREBALL_DAMAGE) + ' hit points.', libtcod.orange)
            obj.fighter.take_damage(FIREBALL_DAMAGE)

# Sets font
libtcod.console_set_custom_font('terminal12x12_gs_ro.png', libtcod.FONT_TYPE_GREYSCALE | libtcod.FONT_LAYOUT_ASCII_INROW)
# Sets Screen size, window name, and fullscreen
libtcod.console_init_root(SCREEN_WIDTH, SCREEN_HEIGHT, 'RogueDev', False)
# console_
con = libtcod.console_new(SCREEN_WIDTH, SCREEN_HEIGHT)
#Limit Fps
libtcod.sys_set_fps(LIMIT_FPS)
panel = libtcod.console_new(SCREEN_WIDTH - 20, PANEL_HEIGHT)
status = libtcod.console_new(STATUS_WIDTH, SCREEN_HEIGHT)

# Renders everything onto the game window
def initialize_fov():
    global fov_recompute, fov_map
    # Recomputes FOV
    fov_recompute = True

    # Map for things outside FOV
    fov_map = libtcod.map_new(MAP_WIDTH, MAP_HEIGHT)
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            libtcod.map_set_properties(fov_map, x, y, not map[x][y].block_sight, not map[x][y].blocked)

            libtcod.console_clear(con)

# Starts new game
def new_game():
    global player, inventory, game_msgs, game_state, dungeon_level

    # Player spawn and color
    fighter_component = Fighter(vitality=5, hp=50, dexterity=1, strength=4, intelligence=5, wisdom=5, luck=5, light_range=7, xp=0, regen=0.1, death_function=player_death)
    player = Object(0, 0, chr(2), 'player', libtcod.white, blocks=True, fighter=fighter_component)
    # Starting player level
    player.level = 1
    # Starting value for dungeon floor
    dungeon_level = 1
    # Makes map
    make_map()
    # Enables FOV
    initialize_fov()
    # Sets game state to playing
    game_state = 'playing'
    # List for inventory
    inventory = []
    # list for game messages
    game_msgs = []
    # Sets values based on vit
    check_vitality()
    # Set HP to max
    player.fighter.hp = player.fighter.max_hp

    message('I still need to change this.', libtcod.red)

# Renders next dungeon level
def next_level():
    global dungeon_level
    message('You take a moment to rest, and recover your strength.', libtcod.light_violet)
    player.fighter.heal(player.fighter.max_hp / 2)

    dungeon_level += 1
    message('After a rare moment of peace, you descend deeper into  the heart of the dungeon...', libtcod.red)
    make_map()
    initialize_fov()

# Main game loop
def play_game():
    global key, mouse, TORCH_RADIUS, player_action

    # Default player action
    player_action = None
    mouse = libtcod.Mouse()
    key = libtcod.Key()

    # Main loop
    while not libtcod.console_is_window_closed():
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)
        TORCH_RADIUS = player.fighter.light_range
        check_vitality()
        # Starts render
        render_all()
        # Flush screen
        libtcod.console_flush()
        # Check for level up
        check_level_up()
        # Flush objects
        for object in objects:
            object.clear()
        # Exit loop break
        player_action = handle_keys()
        if player_action == 'exit':
            save_game()
            break
            # Checks if game state is playing and disables movement if not set to playing
        if game_state == 'playing' and player_action != 'didnt-take-turn':
            for object in objects:
                if object.ai:
                    object.ai.take_turn()

# Function to save game
def save_game():
    file = shelve.open('savegame', 'n')
    file['map'] = map
    file['objects'] = objects
    file['player_index'] = objects.index(player)  #index of player in objects list
    file['inventory'] = inventory
    file['game_msgs'] = game_msgs
    file['game_state'] = game_state
    file['stairs_index'] = objects.index(stairs)
    file['dungeon_level'] = dungeon_level
    file.close()

# Function to load game
def load_game():
    global map, objects, player, inventory, game_msgs, game_state, stairs, dungeon_level

    file = shelve.open('savegame', 'r')
    map = file['map']
    objects = file['objects']
    player = objects[file['player_index']]
    inventory = file['inventory']
    game_msgs = file['game_msgs']
    game_state = file['game_state']
    stairs = objects[file['stairs_index']]
    dungeon_level = file['dungeon_level']
    file.close()

    initialize_fov()

# Function to handle main menu
def main_menu():
    img = libtcod.image_load('menu_background.png')

    while not libtcod.console_is_window_closed():
        libtcod.image_blit_2x(img, 0, 0, 0)

        libtcod.console_set_default_foreground(0, libtcod.light_yellow)
        libtcod.console_print_ex(0, SCREEN_WIDTH/2, SCREEN_HEIGHT/2-4, libtcod.BKGND_NONE, libtcod.CENTER,
            'Future Shock')
        libtcod.console_print_ex(0, SCREEN_WIDTH/2, SCREEN_HEIGHT-2, libtcod.BKGND_NONE, libtcod.CENTER,
            'By Brandon Lee Boerner')

        choice = menu('', ['Play a new game', 'Continue last game', 'Quit'], 24)
        if choice == 0:
            new_game()
            play_game()
        elif choice == 1:
            try:
                load_game()
            except:
                msgbox('\n No saved game to load.\n', 24)
                continue
            play_game()
        elif choice == 2:
            break
main_menu()
